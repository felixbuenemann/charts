#helm:generate $HELM_GENERATE_DIR/tpl/storage.sh
#
# This is the main configuration file for Deis object storage. The values in
# this file are passed into the appropriate services so that they can configure
# themselves for persisting data in object storage.
#
# In general, all object storage credentials must be able to read and write to
# the container or bucket they are configured to use.
#
# When you change values in this file, make sure to re-run 'helmc generate'
# on this chart.

# Set the storage backend
#
# Valid values are:
# - s3: Store persistent data in AWS S3 (configure in S3 section)
# - azure: Store persistent data in Azure's object storage
# - gcs: Store persistent data in Google Cloud Storage
# - minio: Store persistent data on in-cluster Minio server
storage = "minio"

# Set the location of Workflow's PostgreSQL database
#
# Valid values are:
# - on-cluster: Run PostgreSQL within the Kubernetes cluster (credentials are generated
#   automatically; backups are sent to object storage
#   configured above)
# - off-cluster: Run PostgreSQL outside the Kubernetes cluster (configure in database section)
database_location = "on-cluster"

[minio]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-6aac8ba"

[s3]
# Your AWS access key. Leave it empty if you want to use IAM credentials.
accesskey = ""
# Your AWS secret key. Leave it empty if you want to use IAM credentials.
secretkey = ""
# Any S3 region
region = "us-west-1"
# Your buckets.
registry_bucket = "your-registry-bucket-name"
database_bucket = "your-database-bucket-name"
builder_bucket = "your-builder-bucket-name"

[azure]
accountname = "YOUR ACCOUNT NAME"
accountkey = "YOUR ACCOUNT KEY"
registry_container = "your-registry-container-name"
database_container = "your-database-container-name"
builder_container = "your-builder-container-name"

[gcs]
# key_json is expanded into a JSON file on the remote server. It must be
# well-formatted JSON data.
key_json = '''Paste JSON data here.'''
registry_bucket = "your-registry-bucket-name"
database_bucket = "your-database-bucket-name"
builder_bucket = "your-builder-bucket-name"

[builder]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-5c8fb3d"

[slugbuilder]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-a23f6b7"

[dockerbuilder]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-52441a1"

[controller]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-9043924"

[slugrunner]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-3b3aaad"

[database]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-d1912ca"
# Configure the following ONLY if using an off-cluster PostgreSQL database
name = "database name"
username = "database username"
password = "database password"
host = "database host"
port = "database port"

[registry]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-1cc97dd"

[workflowManager]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-af9ef04"
versionsApiURL = "https://versions.deis.com"
doctorApiURL = "https://doctor.deis.com"

[logger]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-ba819b0"

[router]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-7c23489"
platformDomain = ""

[fluentd]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-905cde5"

[grafana]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-5ff77c7"

[influxdb]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-5ff77c7"

[telegraf]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-5ff77c7"

[nsqd]
org = "deisci"
pullPolicy = "IfNotPresent"
dockerTag = "git-2157129"
